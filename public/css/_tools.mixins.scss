/*------------------------------------*\
	Mixins
\*------------------------------------*/


/**
* Convert pixels to REMs with fallback for older browsers
* Example usage:
* @include font-size(14px)
*/
@mixin font-size($size){
	font-size: $size;
	font-size: ($size / $base-font-size) * 1rem;
}




/**
* Convert pixels to REMs with fallback for older browsers
* Example usage:
* @include font-size(14)
*/
@mixin responsive($property, $size){
	#{$property}: calc(#{$size}vw + #{$size}vh + #{$size}vmin);
}




/**
* Add a breakpoint
* Example usage:
* @include breakpoint(s) { // css }
*/
@mixin breakpoint($size){
	@if $size == xl{
		@media screen and (max-width: $break-xl){
			@content;
		}
	}
	@if $size == l{
		@media screen and (max-width: $break-l){
			@content;
		}
	}
	@if $size == m{
		@media screen and (max-width: $break-m){
			@content;
		}
	}
	@if $size == s{
		@media screen and (max-width: $break-s){
			@content;
		}
	}
	@if $size == xs{
		@media screen and (max-width: $break-xs){
			@content;
		}
	}
}



/**
* Create a breakpoint for below a given pixel size
* Example usage:
* @include below(200px) { // css }
*/
@mixin below($size){
	@media screen and (max-width: $size){
		@content;
	}
}



/**
* Create a breakpoint for above a given pixel size
* Example usage:
* @include above(200px) { // css }
*/
@mixin above($size){
	@media screen and (min-width: $size){
		@content;
	}
}


/**
Create a CSS transition
* @param {String} $transition    Parameters for the transition
* @example @include transition(background 0.5s linear);
* @group global
*/
@mixin transition($transition){
	-webkit-transition: $transition;
	   -moz-transition: $transition;
	     -o-transition: $transition;
	        transition: $transition;
}



/**
 * Clearfix
 * Example usage:
 * .wrap {
 * 		...
 * 		@extend %clearfix;
 * }
 */
%clearfix{
	&:after{
		display: table;
		clear: both;
		content: "";
	}
}



/* for full size backgrounds */
.fillArea{
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	content: "";
}

@mixin theme($textColour, $backgroundColour){
	h1, h2, h3, h4, h5, h6, p, a, li, span{
		color: $textColour;
	}
	hr{
		background: $textColour;
	}
	a:hover{
		color: darken($textColour, 20%);
	}
	.btn{
		color: $textColour;
		border-color: $textColour;
		&:after{
			background-color: $textColour;
		}
	}
	&.block--hp{
		background-color: $backgroundColour;
	}
	&:not(.block--fullscreen).block--about:not(.block--about-first){
		background-color: $backgroundColour;
	}
	&.block--services:not(.block--services-first){
		li{
			color: #fff;
		}
		.block-background:after{
			background: linear-gradient(to left,
			rgba($backgroundColour, 0.6) 0%,
			rgba($backgroundColour, 1) 100%
			);
			@extend .fillArea;
		}
	}
	&.block--tech:not(.block--tech-first){
		.block-background:after{
			background-color: rgba($backgroundColour, 0.4);
			@extend .fillArea;
		}
	}
	.block--casestudy-testimony{
		background-color: $backgroundColour;
		blockquote{
			color: #fff;
			footer{
				color: $textColour;
			}
		}
	}
}


@mixin responsive-font($size){
	@if $size == xl{
	}
	@if $size == l{
	}
	@if $size == m{
		@include responsive(font-size, 1.1);
		@include breakpoint(m){
			font-size: $small;
		}
	}
	@if $size == s{
		@include responsive(font-size, 0.9);
		@include breakpoint(m){
			font-size: $extra-small / 0.85;
		}
	}
	@if $size == xs{
		@include responsive(font-size, 0.7);
		@include breakpoint(m){
			font-size: $extra-small;
		}
	}
}
